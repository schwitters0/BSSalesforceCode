webservice static String uploadPDFToBook(Blob file_body, String file_name, String uuid)
    {
        // Pull in Ocrolus service info from Custom Setting
        String createBookEndpoint = Ocrolus_Custom_Settings__c.getInstance().Ocrolus_API_Enpoint_URL__c + 'book/upload';
        String api_key = Ocrolus_Custom_Settings__c.getInstance().API_Key__c;
        
       
        // See http://enreeco.blogspot.com/2013/01/salesforce-apex-post-mutipartform-data.html for info on
        // code/sending out multipart/form-data requests
        
        // Create "Boundary"
        String boundary = '----------------------------741e90d31eff';
        
        
        // Create "uuid" portions of request body
        // Create uuid Header
        String uuidHeader = '--' + boundary 
            			  + '\nContent-Disposition: form-data; name="uuid";';
        
        // Create uuid Footer
        String uuidFooter = '--'+boundary+'--';
        
        // base64 encode the uuid Header
        String uuidHeaderEncoded = EncodingUtil.base64Encode(Blob.valueOf(uuidHeader+'\r\n\r\n'));
        while(uuidHeaderEncoded.endsWith('='))
        {
            uuidHeader+=' ';
            uuidHeaderEncoded = EncodingUtil.base64Encode(Blob.valueOf(uuidHeader+'\r\n\r\n'));
        }
        
        // Create uuid Body
        String uuidBodyEncoded = EncodingUtil.base64Encode(Blob.valueOf(String.valueOf(uuid)));
        
        Blob uuidBodyBlob = null;
        String uuidLast4Bytes = uuidBodyEncoded.substring(uuidBodyEncoded.length()-4,uuidBodyEncoded.length());
        
        // Create combined uuid Body portion
        if(uuidLast4Bytes.endsWith('==')) 
        {
            uuidLast4Bytes = uuidLast4Bytes.substring(0,2) + '0K';
            uuidBodyEncoded = uuidBodyEncoded.substring(0,uuidBodyEncoded.length()-4) + uuidLast4Bytes;
            String uuidFooterEncoded = EncodingUtil.base64Encode(Blob.valueOf(uuidFooter));
            uuidBodyBlob = EncodingUtil.base64Decode(uuidHeaderEncoded+uuidBodyEncoded);
        } else if(uuidLast4Bytes.endsWith('=')) {
            uuidLast4Bytes = uuidLast4Bytes.substring(0,3) + 'N';
            uuidBodyEncoded = uuidBodyEncoded.substring(0,uuidBodyEncoded.length()-4) + uuidLast4Bytes;
            uuidFooter = '\n' + uuidFooter;
            String uuidFooterEncoded = EncodingUtil.base64Encode(Blob.valueOf(uuidFooter));
            uuidBodyBlob = EncodingUtil.base64Decode(uuidHeaderEncoded+uuidBodyEncoded);              
        } 
        else 
        {
            // Prepend the CR LF to the footer
            uuidBodyBlob = EncodingUtil.base64Decode(uuidHeaderEncoded+uuidBodyEncoded);  
        }
              
        
        // Create "upload" portion of request body
        // Create upload Header
        String uploadHeader = '\n--' + boundary
            				 + '\nContent-Disposition: form-data; name="upload"; filename="'+file_name+'";'
            				 + '\nContent-Type: application/octet-stream';
 
        // Create upload Footer
        String uploadFooter = '--'+boundary+'--';             
        
        // base64 encode the upload Header
        String uploadHeaderEncoded = EncodingUtil.base64Encode(Blob.valueOf(uploadHeader+'\r\n\r\n'));
        while(uploadHeaderEncoded.endsWith('='))
        {
            uploadHeader+=' ';
            uploadHeaderEncoded = EncodingUtil.base64Encode(Blob.valueOf(uploadHeader+'\r\n\r\n'));
        }
        
        // Create upload Body
        String uploadBodyEncoded = EncodingUtil.base64Encode(file_body);
        Blob uploadBodyBlob = null;
        String uploadLast4Bytes = uploadBodyEncoded.substring(uploadBodyEncoded.length()-4,uploadBodyEncoded.length());
              
        // GW: replacement section to get rid of padding without corrupting data
        if(uploadLast4Bytes.endsWith('==')) 
        {
            uploadLast4Bytes = uploadLast4Bytes.substring(0,2) + '0K';
            String uploadFooterEncoded = EncodingUtil.base64Encode(Blob.valueOf(uploadFooter));
            uploadBodyBlob = EncodingUtil.base64Decode(uploadHeaderEncoded+uploadBodyEncoded+uploadFooterEncoded);
        } else if(uploadLast4Bytes.endsWith('=')) {
            uploadLast4Bytes = uploadLast4Bytes.substring(0,3) + 'N';
            uploadBodyEncoded = uploadBodyEncoded.substring(0,uploadBodyEncoded.length()-4) + uploadLast4Bytes;
            uploadFooter = '\n' + uploadFooter;
            String uploadFooterEncoded = EncodingUtil.base64Encode(Blob.valueOf(uploadFooter));
            uploadBodyBlob = EncodingUtil.base64Decode(uploadHeaderEncoded+uploadBodyEncoded+uploadFooterEncoded);              
        } 
        else 
        {
            // Prepend the CR LF to the footer
            uploadFooter = '\r\n' + uploadFooter;
            String uploadFooterEncoded = EncodingUtil.base64Encode(Blob.valueOf(uploadFooter));
            uploadBodyBlob = EncodingUtil.base64Decode(uploadHeaderEncoded+uploadBodyEncoded+uploadFooterEncoded);  
        }
  
        
        // Combine uuid and upload bodies
        String bodyBlobAsHex = EncodingUtil.convertToHex(uuidBodyBlob) + EncodingUtil.convertToHex(uploadBodyBlob);  // Need to convert to Hex, then back to Blob to combine
        Blob bodyBlob = EncodingUtil.convertFromHex(bodyBlobAsHex);
        
        
        // Make callout
        Http http = new Http();
        HttpRequest httpReq = new HttpRequest();
        httpReq.setHeader('Content-Type','multipart/form-data; boundary='+boundary);
        httpReq.setHeader('Content-Length', String.valueof(bodyBlob));
        httpReq.setHeader('Authorization', 'Basic ' + api_key);
        httpReq.setMethod('POST');
        httpReq.setEndpoint(createBookEndpoint);
        httpReq.setBodyAsBlob(bodyBlob);
        httpReq.setTimeout(120000);
        HTTPResponse httpRes = http.send(httpReq);
        System.debug('Request: ' + httpReq.getBody());
        System.debug('Response: ' + httpRes.getBody());
        
        return httpRes.getBody();

    }
